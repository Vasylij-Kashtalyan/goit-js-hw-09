{"version":3,"sources":["js/03-promises.js"],"names":["formEl","document","querySelector","inputDelayEl","inputStepEl","inputAmountEl","btnEl","onFormSubmit","evt","preventDefault","startdelay","value","step","amount","i","createPromise","then","position","delay","console","log","catch","currentTarget","reset","promises","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener"],"mappings":";AAAA,MAAMA,EAASC,SAASC,cAAc,SAChCC,EAAeF,SAASC,cAAc,uBACtCE,EAAcH,SAASC,cAAc,sBACrCG,EAAgBJ,SAASC,cAAc,wBACvCI,EAAQL,SAASC,cAAc,UAOrC,SAASK,EAAaC,GACpBA,EAAIC,iBACEC,MAAAA,GAAcP,EAAaQ,MAC3BC,GAAQR,EAAYO,MACpBE,GAAUR,EAAcM,MAEzB,IAAA,IAAIG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAIlCC,EAHwBD,EAAE,EACLJ,EAAaI,EAAIF,GAGnCI,KAAK,EAAGC,SAAAA,EAAUC,MAAAA,MACjBC,QAAQC,2BAA2BH,QAAeC,UAInDG,MAAM,EAAGJ,SAAAA,EAAUC,MAAAA,MAClBC,QAAQC,0BAA0BH,QAAeC,UAKvDV,EAAIc,cAAcC,QAGpB,SAASR,EAAcE,EAAUC,GAaxBM,OAZU,IAAIC,QAAQ,CAACC,EAASC,KAC/BC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EAEFF,EAAQ,CAAET,SAAAA,EAAUC,MAAAA,IAGpBS,EAAO,CAAEV,SAAAA,EAAUC,MAAAA,KAEpBA,KAzCPlB,EAAOgC,iBAAiB,SAAUzB,GAClCJ,EAAa6B,iBAAiB,QAAS,QACvC5B,EAAY4B,iBAAiB,QAAS,QACtC3B,EAAc2B,iBAAiB,QAAS","file":"03-promises.970e7086.js","sourceRoot":"../src","sourcesContent":["const formEl = document.querySelector('.form');\nconst inputDelayEl = document.querySelector('input[name=\"delay\"]');\nconst inputStepEl = document.querySelector('input[name=\"step\"]');\nconst inputAmountEl = document.querySelector('input[name=\"amount\"]');\nconst btnEl = document.querySelector('button');\n\nformEl.addEventListener('submit', onFormSubmit);\ninputDelayEl.addEventListener('input', ()=>{});\ninputStepEl.addEventListener('input', ()=>{});\ninputAmountEl.addEventListener('input', ()=>{});\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const startdelay = +inputDelayEl.value; // перваяотсрочка вызова ф-ции\n  const step = +inputStepEl.value; // шаг изменения отсрочки\n  const amount = +inputAmountEl.value; // кол-во создаваемых промисов\n\n  for (let i = 0; i < amount; i += 1) {\n    const currentPosition = i+1; // текущая позиция промиса (номер промиса)\n    const currentDelay = startdelay + i * step; // текущая отсрочка вызова ф-ции\n    \n    createPromise(currentPosition, currentDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        \n      \n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n        \n      });\n  }\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const promises = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promises;\n}"]}